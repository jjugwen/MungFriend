name: CI
on:
  # Triggers the workflow on push events but only for the "main" branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    # 소스를 가져옵니다.
      - name: Checkout source code
        uses: actions/checkout@main
        
    # 실행 속도를 빠르게 하기 위해 설치된 Node 모듈을 캐시하도록 설정합니다.
      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-main-build-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
            
      - name: Generate Environment Variables File for Production
        run: |
          echo "REACT_APP_KAKAOMAP_KEY=$REACT_APP_KAKAOMAP_KEY" >> .env
        env:
          REACT_APP_KAKAOMAP_KEY: ${{ secrets.REACT_APP_KAKAOMAP_KEY }}
          
   # 모듈을 설치합니다.
      - name: Install Dependencies
        run: yarn install
  
   # 결과물을 만듭니다.
      - name: Build
        run: CI=false yarn build
            
   # S3에 결과물을 업로드합니다.
      - name: Deploy
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp \
            --recursive \
            --region ${{ secrets.AWS_REGION }} \
            build s3://${{ secrets.BUCKET_NAME }}
            
   # CloudFront에 연결합니다.          
      - name: Invalidate cache CloudFront
        run: | 
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.DISTRIBUTION_ID }} \
            --paths "/*"
